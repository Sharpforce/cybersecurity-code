const fs = require('fs');
const path = require('path');
const express = require('express');
const axios = require("axios");

const app = express();
const PORT = 3000;

function loadIP(version) {
    let ipModule;
    if (version === "1.1.8") {
        ipModule = require("ip-1.1.8");
    } else if (version === "1.1.9") {
        ipModule = require("ip-1.1.9");
    } else {
        ipModule = require("ip-1.1.8");
    }
    
    return ipModule;
}

app.get('/', async (req, res) => {
    const url = req.query.url;
    const userSelectedVersion = req.query.version || "1.1.8";
    const ip = loadIP(userSelectedVersion);

    if(url) {
        const regex = /^(?:https?:\/\/)?(?:www\.)?(\[[0-9a-fA-F:.]+\]|[a-zA-Z0-9\-_.]+)(?::\d{1,5})?(?:\/.*)?$/;
        let match = url.match(regex);

        if (match && match[1]) {
            let hostname = match[1];

            if (hostname.startsWith("[") && hostname.endsWith("]")) {
                hostname = hostname.slice(1, -1);
            }
            
            try {
                if(ip.isPublic(hostname)) {
                    console.log("Testing the isPublic function in ip version " + userSelectedVersion + " with the following IP address: " + hostname);
                    
                    try {
                        const response = await axios.get(url, { timeout: 5000 });
                        res.send(response.data);
                    }
                    catch(error) {
                        console.log("Hostname " + hostname + " is a valid public IP address for node-ip, but not for Axios: " + error);
                        const filePath = path.join(__dirname, 'views/500.html');
                        fs.readFile(filePath, 'utf8', (err, data) => {                   
                            return res.status(500).send(data);
                        });
                    }
                }
                else {
                    const filePath = path.join(__dirname, 'views/403.html');
                    fs.readFile(filePath, 'utf8', (err, data) => {                   
                        return res.status(403).send(data);
                    });
                }
            }
            catch(error) {
                console.log("Hostname " + hostname + " is not a valid IP address for node-ip: " + error);

                try {
                    if(hostname === "localhost") {
                        const filePath = path.join(__dirname, 'views/403.html');
                        fs.readFile(filePath, 'utf8', (err, data) => {                   
                            return res.status(403).send(data);
                        });
                    }
                    else {
                        const response = await axios.get(url, { timeout: 5000 });
                        res.send(response.data);
                    }
                } catch (error) {
                    const filePath = path.join(__dirname, 'views/500.html');
                    fs.readFile(filePath, 'utf8', (err, data) => {                   
                        return res.status(500).send(data);
                    });
                }
            }
        }
        else {
            const filePath = path.join(__dirname, 'views/400.html');
            fs.readFile(filePath, 'utf8', (err, data) => {                   
                return res.status(400).send(data);
            });
        }
    }
    else {
        const filePath = path.join(__dirname, 'views/index.html');
        fs.readFile(filePath, 'utf8', (err, data) => {
            res.send(data);
        });
    }   
});

app.get('/admin', async (req, res) => {
    let clientIP = req.connection.remoteAddress;
    const allowedIPs = [
        "::ffff:127.0.0.1",
        "127.0.0.1",
        "::1" 
    ];

    if (!allowedIPs.includes(clientIP)) {
        const filePath = path.join(__dirname, 'views/403.html');
        fs.readFile(filePath, 'utf8', (err, data) => {                   
            return res.status(403).send(data);
        });
    }
    else {
        const filePath = path.join(__dirname, 'views/admin.html');
        fs.readFile(filePath, 'utf8', (err, data) => {                   
            return res.send(data);
        });
    }
});

app.listen(PORT, () => {
    console.log(`http://0.0.0.0:${PORT}`);
});


